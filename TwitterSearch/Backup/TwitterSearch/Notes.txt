== ASP.NET Version ==

=== What I learned ===
* Strongly types views are optimal.  If I feel the need for two models in a view, create a composite model with sub models as properties.
* The variance in size between client pages and Twitter pages adds some complexity.  There must be conversion logic to find the correct Twitter page for a given client page.
* The max_id parameter in Twitter's search API is really important for a reasonable user experience.  Without it, navigating across pages would behave unpredictably as new Tweets come in.  For example, if 10 new Tweets came in since I last made a request and I click next, I'm going to see the same results on the next page because they would have all shifted over.  Local caching would make this behavior even more unpredictable.  The max_id parameter keeps the pages consistent until an explicit user action calls for a refresh of data.

=== What I might do differently ===
* I don't think I'm taking enough advantage of model binding.  The Search() action on the TwitterSearchController takes parameters instead of a model.  I did this because I'm not sure of a cleaner way to persist the state of the query across pages in the UI.  I could use hidden form fields or something else, but I'm not sure of the ASP.NET MVC best practice.
* I don't like how the Search action is handling the default view.  I'm not sure how else I can share most of the view, maybe it needs a partial view?
* I'm not sure about my null checks in my view.  They work, but it smells funny.
* Used Twitterizer for handling calls to Twitter API.  Note to self: update Twitterizer to expose max_id result for client callers.

== Backbone Version ==

=== What I learned ===
* Backbone is awesome.
* Markup should be in a template, especially if it is referenced in a view.
* Backbone could use some Model caching utilities.  There are some home baked solutions out there that seem more complex than they need to be.

=== What I might do differently ===
* TweetCollection has many properties and functions.  There may be an opportunity to factor out some of this logic, though I haven't quite figured out the best practices for where logic should live when using Backbone.
* TweetCollection contains its own caching logic, which I think caused some weird things like triggering a "refresh" event from the next/previous functions.  I think it makes more sense to override the fetch function and return the cached model if its valid, otherwise call the Backbone.Collection's fetch.  I would need to read the Backbone code to reach parity with fetch's standard functionality (e.g. fire necessary events).
* Next/Previous are always displayed.  My initial implementation of the paging controls markup does not use a template, which would be required to add logic that checks the model to toggle next/previous on and off.

== BDD Tests ==

Requirements captured below in Gherkin syntax for clarification purposes.  I didn't write implementations for these tests, though have used SpecFlow and NBehave for this in the past.

=== Display 10 Tweets per page ===
Given a new query of "#test"
When the search button is clicked
Then a Twitter search call is made
And 10 Tweets are displayed to the user

=== Store 100 Tweets locally ===
Given a current query of "#test"
And a current client page of 1
When the next button is clicked
Then a Twitter search call is not made
And 10 Tweets are displayed to the user

=== Get recent search results ===
Given a current query of "#test"
And a current client page of 1
And a new query of "#test"
When the search button is clicked
Then a Twitter search call is made
And the Twitter search request does not contain a max_id
And 10 Tweets are displayed to the user

=== Maintain pagination consistency ===
Given a current query of "#test"
And a current client page of 10
When the next button is clicked
Then a Twitter search call is made
And the Twitter search request contains a valid max_id

== Unit Tests ==

There is a file not included in the project called DetermineTwitterPageNumberTests.cs.  Since I wrote most of this app at home where I only have Visual Web Developer, I did not write unit tests for everything.  I wrote the PaginationConverter at work, where I have Visual Studio and wrote some unit tests around it.  More or less, trying to show that I can write some unit tests.