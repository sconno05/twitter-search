@{
    ViewBag.Title = "Backbone";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.8.2/jquery.min.js" type="text/javascript"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.4.2/underscore-min.js" type="text/javascript"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/backbone.js/0.9.2/backbone-min.js" type="text/javascript"></script>

<script type="text/javascript">

var Tweet = Backbone.Model.extend({
});

var TweetCollection = Backbone.Collection.extend({
    model: Tweet,
    query: '',
    clientPage: 1,
    clientPageSize: 10,
    twitterPage: 1,
    twitterPageSize: 100,
    maxId: null,

    fetch: function(options) {
        console.log('Fetching from Twitter...');
        return Backbone.Collection.prototype.fetch.call(this, options);
    },

	url: function() {
        
        // Assemble search parameters
        var data = {
            q: this.query,
            rpp: this.twitterPageSize,
            page: this.getTwitterPage()
        };

        if (this.maxId)
        {
            data.max_id = this.maxId;
        }

        // callback parameter required to prevent Access-Control-Allow-Origin error
		return "http://search.twitter.com/search.json?" + $.param(data) + "&callback=?";
	},

    parse: function(response) {
        // The max_id needs to be grabbed before the results are parsed into a collection of Tweets.  This smells funny, but
        // I'm not sure how else I can get at this without circumventing Backbone's fetch().
        if (!this.maxId) {
            this.maxId = response.max_id_str;
        }
        return response.results;
    },

    // Determines the required start index within the Twitter page results to get the requested client page results.
    getStartIndex: function() {
        return ((this.clientPage - 1) * this.clientPageSize) - ((this.twitterPage - 1) * this.twitterPageSize);
    },
    
    // Determines the required Twitter page number for the requested client page number.
    getTwitterPage: function() {
        return Math.ceil((this.clientPageSize / this.twitterPageSize) * this.clientPage);
    },

    // Move to the next page in the collection
    nextPage: function() {
        this.clientPage = this.clientPage + 1;
        console.log('Page: ' + this.clientPage);
        this.fetchTwitterPageIfNecessary();
        this.trigger('refresh', this);
    },

    // Move to the previous page in the collection
    previousPage: function() {
        if (this.clientPage > 1)
        {
            this.clientPage = this.clientPage - 1;
            console.log('Page: ' + this.clientPage);
            this.fetchTwitterPageIfNecessary();
            this.trigger('refresh', this);
        }
    },

    // Fetches the required Twitter page from Twitter if it is not stored in memory.
    fetchTwitterPageIfNecessary: function() {
        var requiredTwitterPage = this.getTwitterPage();
        if (this.twitterPage != requiredTwitterPage) {
            this.twitterPage = requiredTwitterPage;
            this.fetch();    
        }
    },

    // Reset the max_id for Twitter search calls. This will allow for the retrieval of Tweets created more recently than the last
    // Twitter search request.
    resetMaxId: function() {
        this.maxId = null;
    },
});

var tweets = undefined;

$(function () {
    // SearchView handles the rendering of input fields 
    window.SearchView = Backbone.View.extend({
        el: $("#searchBox"),

        searchTwitter: function (e) {
            console.log('Updating search query...');
            e.preventDefault();
            var me = this;

            if (!tweets)
            {
                tweets = new TweetCollection();
                tweets.bind('refresh', this.render);
            }

            // Update the search query, and reset the maxId so recent results can be fetched
            tweets.query = $("#searchText").val();
            tweets.resetMaxId();
            tweets.fetch({
                success: function (tweets) {                        
                    me.render(tweets);
                }
            })
        },

        render: function(tweets) {
            var tweetsJson = tweets.toJSON();
            var startIndex = tweets.getStartIndex();

            // Slice results to pass currently requested page for display
            var template = _.template($('#tweet-list-template').html(), {tweets: tweetsJson.slice(startIndex, startIndex + tweets.clientPageSize)});
            $("#tweets").html(template);
        },

        events: {
            "submit": "searchTwitter"
        }
    });
});

$(function () {
    window.PaginationView = Backbone.View.extend({
        el: "#pagingControls",
        events: {
            'click a.prev': 'previous',
            'click a.next': 'next'
        },
        previous: function () {
            
            tweets.previousPage();
        },
        next: function () {
            
            tweets.nextPage();
        }
    });
});

$(function () {
    var App = Backbone.Router.extend({
        routes: {
            "": "index"
        },
        index: function () {
            var searchView = new SearchView();
            var paginationView = new PaginationView();
        }
    });
    var app = new App();

    Backbone.history.start();
});

</script>

<h2>Backbone</h2>

<div id="searchBox">
    <form id="searchBoxForm" method="get">
        <span>Enter a hashtag</span>
        <input id="searchText" name="searchText" type="text" value="#test" autocomplete="off" autofocus="true" />
        <input id="searchButton" type="submit" value="Search" />
    </form>
</div>

<div id="searchResults">
    <div id="pagingControls">
        <a href="#" class="prev">Previous</a>
        <a href="#" class="next">Next</a>
    </div>
    <ul id="tweets"></ul>
</div>

<script type="text/template" id="tweet-list-template">
    <% _.each(tweets, function (tweet) { %>
        <li>
            <h3>
				<img src="<%= tweet.profile_image_url %>" alt="<%= tweet.from_user %>" width="45" />
				<div>
					<a href="http://twitter.com/<%= tweet.from_user %>" title="<%= tweet.from_user %>">@@<%= tweet.from_user %></a>
				</div>
			</h3>
			<p><%= tweet.text %></p>
        </li>
    <% }); %>
</script>